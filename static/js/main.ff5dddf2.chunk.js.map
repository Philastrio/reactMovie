{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","_ref2","src","_ref3","prototype","PropTypes","string","isRequired","array","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yVAKA,SAASA,EAATC,GAAkD,IAAlCC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,OAAQC,EAAmBH,EAAnBG,OAAQC,EAAWJ,EAAXI,SACtC,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAAQA,EAAQQ,IAAKT,KAEnCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbL,EAAOQ,IAAI,SAACC,EAAOC,GAAR,OAAkBR,EAAAC,EAAAC,cAACO,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAE9DR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACCW,KAAMb,EACNc,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eAQb,SAASZ,EAATa,GAAoC,IAAdpB,EAAcoB,EAAdpB,OAAQQ,EAAMY,EAANZ,IAC7B,OAAQL,EAAAC,EAAAC,cAAA,OAAKgB,IAAKrB,EAAQQ,IAAKA,EAAKT,MAAOS,EAAKF,UAAU,kBAG3D,SAASM,EAATU,GAA4B,IAAPZ,EAAOY,EAAPZ,MACpB,OACCP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBI,GAIlCb,EAAM0B,UAAY,CACjBxB,MAAOyB,IAAUC,OAAOC,WACxB1B,OAAQwB,IAAUC,OAAOC,WACzBzB,OAAQuB,IAAUG,MAAMD,WACxBxB,SAAUsB,IAAUC,OAAOC,YAG5BnB,EAAYgB,UAAY,CACvBvB,OAAQwB,IAAUC,OAAOC,WACzBlB,IAAKgB,IAAUC,OAAOC,YAGvBd,EAAWW,UAAY,CACtBb,MAAOc,IAAUC,OAAOC,YAEV7B,QCLA+B,6MA5CbC,MAAQ,KAMRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOvB,IAAI,SAACwB,GAEpC,OADAC,QAAQC,IAAIF,GACL9B,EAAAC,EAAAC,cAAC+B,EAAD,CACLrC,MAAOkC,EAAMI,cACbrC,OAAQiC,EAAMK,mBACdzB,IAAKoB,EAAMM,GACXtC,OAAQgC,EAAMhC,OACdC,SAAU+B,EAAM/B,gBAMtBsC,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAtC,EAAAuC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUf,EAAKgB,WADf,OACLf,EADKY,EAAAI,KAEXjB,EAAKkB,SAAS,CACdjB,WAHW,wBAAAY,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,iEACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAIxB,QAAQC,IAAIuB,yFA5B5BP,KAAKX,8CA+BE,IACCR,EAAWmB,KAAKtB,MAAhBG,OACR,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAW0B,EAAS,MAAQ,gBAC9BA,EAASmB,KAAKrB,gBAAkB,kBAvCvB6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.ff5dddf2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n\treturn (\r\n\t\t<div className='Movie'>\r\n\t\t\t<div className='Movie__Column'>\r\n\t\t\t\t<MoviePoster poster={poster} alt={title}/>\r\n\t\t\t</div>\r\n\t\t\t<div className='Movie__Column'>\r\n\t\t\t\t<h1>{title}</h1>\r\n\t\t\t\t<div className='Movie__Genres'>\r\n\t\t\t\t\t{genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='Movie__Synopsis'>\r\n\t\t\t\t<LinesEllipsis\r\n\t\t\t\t\ttext={synopsis}\r\n\t\t\t\t\tmaxLine='3' // 최대라인 3개 이후는\r\n\t\t\t\t\tellipsis='...'  // ... 으로 표시한다.\r\n\t\t\t\t\ttrimRight\r\n\t\t\t\t\tbasedOn='letters'\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t)\r\n}\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n\treturn (<img src={poster} alt={alt} title={alt} className='Movie__Poster'/>)\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n\treturn(\r\n\t\t<span className='Movie__Genre'>{genre}</span>\r\n\t)\r\n}\r\n\r\nMovie.prototype = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\tposter: PropTypes.string.isRequired,\r\n\tgenres: PropTypes.array.isRequired,\r\n\tsynopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.prototype = {\r\n\tposter: PropTypes.string.isRequired,\r\n\talt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.prototype = {\r\n\tgenre: PropTypes.string.isRequired\r\n}\r\nexport default Movie;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\n\r\nclass App extends Component {\r\n  state = {}\r\n\r\n  componentDidMount() {\r\n    this._getMovies()\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map((movie) => {\r\n      console.log(movie);\r\n      return <Movie\r\n        title={movie.title_english}\r\n        poster={movie.medium_cover_image}\r\n        key={movie.id}\r\n        genres={movie.genres}\r\n        synopsis={movie.synopsis}\r\n      />\r\n    })\r\n    return movies;\r\n  }\r\n\r\n  _getMovies = async () => {\r\n    const movies = await this._callApi()\r\n    this.setState({\r\n    movies\r\n                  })\r\n  }\r\n\r\n  _callApi = () => {\r\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\r\n      .then(response => response.json())\r\n      .then(json => json.data.movies)\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    const { movies } = this.state;\r\n    return (\r\n      <div className={movies ? 'App' : 'App--loading'}>\r\n        {movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}